{"version":3,"file":"template-exporer.js","sources":["../src/parse.js","../src/compile.js"],"sourcesContent":["const PreBlock = /^\\<\\%(?:\\s?)+\\w+.*\\%\\>/\nconst EndBlock = /^<%(\\s?)+}{1}(\\s?)+ %>/\nconst EqualBlock = /^<%(?:\\s?)+=(?:\\s?)+(\\w+).*%>/\nconst TEXT = /^[\\w\\s]+/\nconst PreTag = /^\\<\\w+.*\\>/\nconst EndTag = /^\\<\\/\\w+.*\\>/\n\nconst Condition = /<%(?:\\s?)+(\\w+)(?:\\s?)+\\((.*)\\).*%>/\nexport  const TokenType = {\n    PreBlock: 2,\n    PreTag: 1,\n    EqualBlock: 2,\n    TEXT: 3\n}\n\nclass Token {\n    constructor(type, value = '', unary = false) {\n        this.type = type;\n        this.value = value\n        this.unary = unary // 是否一元标签\n    }\n}\n\nexport function parseToken(template, parseToken = {}) {\n    let code = template\n    let nodes = []\n    let matchedText = ''\n    while (code) {\n        let node;\n        let fn;\n        code = code.trim();\n        let token;\n        if (node = code.match(PreTag)) {\n            matchedText = node[0]\n            token = new Token('PreTag', matchedText)\n            fn = parseToken.start\n        } else if (node = code.match(TEXT)) {\n            matchedText = node[0].trim()\n            token = new Token('TEXT', matchedText, true)\n            fn = parseToken.start\n        } else if (node = code.match(PreBlock)) {\n            matchedText = node[0]\n            token = new Token('PreBlock', matchedText)\n            fn = parseToken.start\n        } else if (node = code.match(EqualBlock)) {\n            matchedText = node[0]\n            token = new Token('EqualBlock', matchedText, true)\n            fn = parseToken.start\n        } else if (node = code.match(EndBlock)) {\n            matchedText = node[0]\n            token = new Token('EndBlock', matchedText)\n            fn = parseToken.end\n        } else if (node = code.match(EndTag)) {\n            matchedText = node[0]\n            token = new Token('EndTag', matchedText)\n            fn = parseToken.end\n        }\n        fn(token)\n        nodes.push(token)\n        code = code.slice(matchedText.length)\n        node = null\n    }\n    return nodes\n}\n\n\nexport function parse(template) {\n    let stacks = []\n    let currentParentToken\n    let root\n\n    const tokens = parseToken(template, {\n        start(token) {\n            let type = TokenType[token.type];\n            let ast = {\n                type,\n                unary: token.unary,\n                children: []\n            }\n            if (type === 1) {\n                ast.text = token.value\n            } else if (type === 2) {\n                const condition = token.value.match(Condition)\n                if (Array.isArray(condition) && condition.length > 1) {\n                    ast.tag = condition[1]\n                    ast.item = condition[2]\n                } else {\n                    ast.item = token.value\n                }\n            }\n            if (!root) {\n                root = ast\n            } else if (currentParentToken) {\n                currentParentToken.children.push(ast)\n            }\n\n            if (!token.unary) {\n                currentParentToken = ast\n                stacks.push(currentParentToken)\n            } else {\n                delete ast.children\n            }\n        },\n        end(token) {\n            stacks.pop()\n            currentParentToken = stacks[stacks.length - 1]\n        }\n    })\n    return {\n        ast: root,\n        tokens\n    };\n}","import {\n    parseToken,\n    TokenType\n} from './parse'\n\nconst Express = /<%(.*)%>/\nconst EqualExpress = /<%(?:\\s?)+=(?:\\s?)+(\\w+)(?:\\s?)+%>/\n\nexport function compile(template, scope) {\n    let code = 'const r=[];\\n  with(this){\\n';\n\n    function add(line, js) {\n        js ? code += `${line}\\n` :\n            code += 'r.push(\"' + line.replace(/\"/g, '\\\\\"') + '\");\\n';\n    }\n    parseToken(template, {\n        start(token) {\n            if (token.type === 'PreBlock') {\n                let matched = token.value.match(Express)\n                if (matched.length > 0) {\n                    add(matched[1], true)\n                }\n            } else if (token.type === 'EqualBlock') {\n                let matched = token.value.match(EqualExpress)\n                if (matched.length > 0) {\n                    add(`r.push(${matched[1]});\\n`, true)\n                }\n            } else {\n                add(token.value)\n            }\n        },\n        end(token) {\n            if (token.type === 'EndTag') {\n                add(token.value)\n            } else if (token.type === 'EndBlock') {\n                let matched = token.value.match(Express)\n                if (matched.length > 0) {\n                    add(matched[1], true)\n                }\n            }\n        }\n    })\n    code += '}\\nreturn r.join(\"\");';\n    return new Function(code.replace(/[\\r\\t\\n]/g, '')).call(scope);\n}"],"names":["PreBlock","EndBlock","EqualBlock","TEXT","PreTag","EndTag","Condition","TokenType","Token","constructor","type","value","unary","parseToken","template","code","nodes","matchedText","node","fn","trim","token","match","start","end","push","slice","length","parse","stacks","currentParentToken","root","tokens","ast","children","text","condition","Array","isArray","tag","item","pop","Express","EqualExpress","compile","scope","add","line","js","replace","matched","Function","call"],"mappings":"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"}