{"version":3,"file":"template-exporer.js","sources":["../src/parse.js","../src/compile.js"],"sourcesContent":["const PreBlock = /^\\<\\%(?:\\s?)+\\w+.*\\%\\>/\nconst EndBlock = /^<%(\\s?)+}{1}(\\s?)+ %>/\nconst EqualBlock = /^<%(?:\\s?)+=(?:\\s?)+(\\w+).*%>/\nconst TEXT = /^[\\w\\s]+/\nconst PreTag = /^\\<\\w+.*\\>/\nconst EndTag = /^\\<\\/\\w+.*\\>/\n\nconst Condition = /<%(?:\\s?)+(\\w+)(?:\\s?)+\\((.*)\\).*%>/\nconst TokenType = {\n    PreBlock: 2,\n    PreTag: 1,\n    EqualBlock: 2,\n    text2: 3\n}\n\n\n\nclass Token {\n    constructor(type, value = '', unary = false) {\n        this.type = type;\n        this.value = value\n        this.unary = unary // 是否一元标签\n    }\n}\n\n\n\nfunction parseToken(template, parseToken = {}) {\n\n    let code = template\n    let nodes = []\n    let matchedText = ''\n    while (code) {\n        let node;\n        let fn;\n        code = code.trim();\n        let token;\n        if (node = code.match(PreTag)) {\n            matchedText = node[0]\n            token = new Token('PreTag', matchedText)\n            fn = parseToken.start\n        } else if (node = code.match(TEXT)) {\n            matchedText = node[0].trim()\n            token = new Token('TEXT', matchedText, true)\n            fn = parseToken.start\n        } else if (node = code.match(PreBlock)) {\n            matchedText = node[0]\n            token = new Token('PreBlock', matchedText)\n            fn = parseToken.start\n        } else if (node = code.match(EqualBlock)) {\n            matchedText = node[0]\n            token = new Token('EqualBlock', matchedText, true)\n            fn = parseToken.start\n        } else if (node = code.match(EndBlock)) {\n            matchedText = node[0]\n            token = new Token('EndBlock', matchedText)\n            fn = parseToken.end\n        } else if (node = code.match(EndTag)) {\n            matchedText = node[0]\n            token = new Token('EndTag', matchedText)\n            fn = parseToken.end\n        }\n        fn(token)\n        nodes.push(token)\n        code = code.slice(matchedText.length)\n        node = null\n    }\n    return nodes\n}\n\n\nexport function parse(template) {\n    let stacks = []\n    let currentParentToken\n    let root\n    const tokens = parseToken(template, {\n        start(token) {\n            let type = TokenType[token.type];\n            let ast = {\n                type,\n                children: []\n            }\n            if (type === 1) {\n                ast.text = token.value\n            } else if (type === 2) {\n                const condition = token.value.match(Condition)\n                if (Array.isArray(condition) && condition.length > 1) {\n                    ast.tag = condition[1]\n                    ast.item = condition[2]\n                } else {\n                    ast.item = token.value\n                }\n            }\n            if (!root) {\n                root = ast\n            } else if (currentParentToken) {\n                currentParentToken.children.push(ast)\n            }\n\n            if (!token.unary) {\n                currentParentToken = ast\n                stacks.push(currentParentToken)\n            }else{\n                delete  ast.children\n            }\n        },\n        end(token) {\n            stacks.pop()\n            currentParentToken = stacks[stacks.length - 1]\n        }\n    })\n    return {\n        ast:root,\n        tokens\n    };\n}","\n\n\nexport function compile(ast){\n\n\n}"],"names":["PreBlock","EndBlock","EqualBlock","TEXT","PreTag","EndTag","Condition","TokenType","text2","Token","constructor","type","value","unary","parseToken","template","code","nodes","matchedText","node","fn","trim","token","match","start","end","push","slice","length","parse","stacks","currentParentToken","root","tokens","ast","children","text","condition","Array","isArray","tag","item","pop","compile"],"mappings":"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"}